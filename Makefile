# =============================================================================
# CRYPTO TRADING BOT - Makefile
# =============================================================================
.PHONY: help install dev-install up down restart logs ps shell db-shell
.PHONY: test test-unit test-integration test-e2e test-cov test-watch
.PHONY: lint format type-check security-check quality-check
.PHONY: migrate migrate-up migrate-down migrate-head migrate-revision
.PHONY: clean clean-py clean-docker clean-data clean-all
.PHONY: venv activate run check-all

# =============================================================================
# Vari√°veis
# =============================================================================
PYTHON := python3
PIP := pip
VENV := .venv
PYTEST := pytest
RUFF := ruff
BLACK := black
MYPY := mypy
BANDIT := bandit
ALEMBIC := alembic

# Nome do container do PostgreSQL
POSTGRES_CONTAINER := crypto-bot-postgres

# Diret√≥rios
SRC_DIR := src
TESTS_DIR := tests

# =============================================================================
# Ajuda
# =============================================================================
help:  ## Mostra esta mensagem de ajuda
	@echo "========================================================================"
	@echo "CRYPTO TRADING BOT - Makefile"
	@echo "========================================================================"
	@echo ""
	@echo "Principais comandos:"
	@echo ""
	@echo "  Ambiente:"
	@echo "    make install          - Instala depend√™ncias do projeto"
	@echo "    make dev-install      - Instala depend√™ncias de desenvolvimento"
	@echo "    make venv             - Cria ambiente virtual"
	@echo ""
	@echo "  Docker:"
	@echo "    make up               - Sobe os servi√ßos (PostgreSQL + Redis)"
	@echo "    make down             - Para os servi√ßos"
	@echo "    make restart          - Reinicia os servi√ßos"
	@echo "    make logs             - Mostra logs dos containers"
	@echo "    make ps               - Lista containers em execu√ß√£o"
	@echo "    make shell            - Abre shell no container"
	@echo "    make up-test          - Sobe apenas postgres de testes"
	@echo "    make down-test        - Para apenas postgres de testes"
	@echo ""
	@echo "  Testes:"
	@echo "    make test             - Executa todos os testes"
	@echo "    make test-unit        - Executa apenas testes unit√°rios"
	@echo "    make test-integration - Executa apenas testes de integra√ß√£o"
	@echo "    make test-cov         - Testes com cobertura de c√≥digo"
	@echo ""
	@echo "  Qualidade de C√≥digo:"
	@echo "    make format           - Formata c√≥digo com Ruff"
	@echo "    make lint             - Verifica c√≥digo com Ruff"
	@echo "    make type-check       - Verifica tipos com MyPy"
	@echo "    make security-check   - Verifica seguran√ßa com Bandit"
	@echo "    make quality-check    - Executa todos os checks de qualidade"
	@echo ""
	@echo "  Banco de Dados:"
	@echo "    make migrate-up       - Aplica migra√ß√µes do Alembic"
	@echo "    make migrate-head     - Aplica todas as migra√ß√µes pendentes"
	@echo "    make migrate-revision - Cria nova migra√ß√£o"
	@echo ""
	@echo "  Limpeza:"
	@echo "    make clean            - Remove arquivos tempor√°rios"
	@echo "    make clean-docker    - Remove containers e volumes"
	@echo "    make clean-all       - Limpa tudo"
	@echo ""
	@echo "========================================================================"

# =============================================================================
# Ambiente Virtual
# =============================================================================
venv:  ## Cria ambiente virtual Python
	@echo "üì¶ Criando ambiente virtual..."
	$(PYTHON) -m venv $(VENV)
	@echo "‚úÖ Ambiente virtual criado em $(VENV)"

install:  ## Instala depend√™ncias do projeto
	@echo "üì¶ Instalando depend√™ncias do projeto..."
	$(PIP) install -r requirements.txt
	@echo "‚úÖ Depend√™ncias instaladas"

dev-install:  ## Instala depend√™ncias de desenvolvimento
	@echo "üì¶ Instalando depend√™ncias de desenvolvimento..."
	$(PIP) install -r requirements-dev.txt
	@echo "‚úÖ Depend√™ncias de desenvolvimento instaladas"

activate:  ## Ativa o ambiente virtual (informa√ß√£o apenas)
	@echo "Para ativar o ambiente virtual, execute:"
	@echo "  source .venv/bin/activate  # Linux/Mac"
	@echo "  .venv\\Scripts\\activate   # Windows"

# =============================================================================
# Docker Compose
# =============================================================================
up:  ## Sobe os servi√ßos (PostgreSQL + Redis)
	@echo "üê≥ Subindo servi√ßos..."
	docker-compose up -d
	@echo "‚úÖ Servi√ßos iniciados"
	@echo "PostgreSQL: localhost:5432"
	@echo "Redis: localhost:6379"

down:  ## Para os servi√ßos
	@echo "üê≥ Parando servi√ßos..."
	docker-compose down
	@echo "‚úÖ Servi√ßos parados"

restart:  ## Reinicia os servi√ßos
	@echo "üîÑ Reiniciando servi√ßos..."
	docker-compose restart
	@echo "‚úÖ Servi√ßos reiniciados"

logs:  ## Mostra logs dos containers
	docker-compose logs -f

ps:  ## Lista containers em execu√ß√£o
	docker-compose ps

shell:  ## Abre shell no container
	docker-compose exec postgres psql -U crypto_bot_user -d crypto_bot

db-shell: shell  ## Alias para shell

up-test:  ## Sobe apenas o postgres de testes
	@echo "üê≥ Subindo postgres-test..."
	docker-compose up -d postgres-test
	@echo "‚è≥ Aguardando banco estar pronto..."
	@sleep 3
	@echo "‚úÖ postgres-test pronto na porta 5433"

down-test:  ## Para apenas o postgres de testes
	@echo "üê≥ Parando postgres-test..."
	docker-compose stop postgres-test
	docker-compose rm -f postgres-test
	@echo "‚úÖ postgres-test parado"

# =============================================================================
# Testes
# =============================================================================
test:  ## Executa todos os testes
	@echo "üß™ Executando testes..."
	$(PYTEST) $(TESTS_DIR)
	@echo "‚úÖ Testes conclu√≠dos"

test-unit:  ## Executa apenas testes unit√°rios
	@echo "üß™ Executando testes unit√°rios..."
	$(PYTEST) $(TESTS_DIR)/unit
	@echo "‚úÖ Testes unit√°rios conclu√≠dos"

test-integration:  ## Executa apenas testes de integra√ß√£o
	@echo "üß™ Executando testes de integra√ß√£o..."
	@echo "üîß Verificando se postgres-test est√° rodando..."
	@docker-compose ps postgres-test | grep -q "Up" || docker-compose up -d postgres-test
	@echo "‚è≥ Aguardando banco estar pronto..."
	@sleep 3
	@echo "üîß Configurando DATABASE_URL para testes..."
	@export DATABASE_URL="postgresql+asyncpg://test_user:test_password@localhost:5433/crypto_bot_test" && \
	export ENCRYPTION_KEY="test_encryption_key_32_bytes_long!!" && \
	$(PYTEST) $(TESTS_DIR)/integration
	@echo "‚úÖ Testes de integra√ß√£o conclu√≠dos"

test-e2e:  ## Executa apenas testes end-to-end
	@echo "üß™ Executando testes E2E..."
	$(PYTEST) $(TESTS_DIR)/e2e
	@echo "‚úÖ Testes E2E conclu√≠dos"

test-cov:  ## Testes com cobertura de c√≥digo
	@echo "üß™ Executando testes com cobertura..."
	$(PYTEST) $(TESTS_DIR) --cov=$(SRC_DIR) --cov-report=html --cov-report=term
	@echo "‚úÖ Relat√≥rio de cobertura em htmlcov/index.html"

test-watch:  ## Executa testes em modo watch
	@echo "üß™ Modo watch ativado..."
	$(PYTEST) --watch $(TESTS_DIR)

test-fast:  ## Executa testes mais rapidamente (com paraleliza√ß√£o)
	@echo "üß™ Executando testes r√°pidos..."
	$(PYTEST) -n auto $(TESTS_DIR)
	@echo "‚úÖ Testes conclu√≠dos"

# =============================================================================
# Qualidade de C√≥digo
# =============================================================================
format:  ## Formata c√≥digo com Black
	@echo "üé® Formatando c√≥digo com Black..."
	$(BLACK) $(SRC_DIR) $(TESTS_DIR)
	@echo "‚úÖ C√≥digo formatado"

format-check:  ## Verifica formata√ß√£o com Black sem alterar arquivos
	@echo "üé® Verificando formata√ß√£o com Black..."
	$(BLACK) --check $(SRC_DIR) $(TESTS_DIR)

lint:  ## Verifica c√≥digo com Ruff
	@echo "üîç Verificando c√≥digo com Ruff..."
	$(RUFF) check $(SRC_DIR) $(TESTS_DIR)
	@echo "‚úÖ Verifica√ß√£o conclu√≠da"

lint-fix:  ## Corrige problemas autom√°ticos do Ruff
	@echo "üîß Corrigindo problemas autom√°ticos..."
	$(RUFF) check --fix $(SRC_DIR) $(TESTS_DIR)
	@echo "‚úÖ Corre√ß√µes aplicadas"

type-check:  ## Verifica tipos com MyPy
	@echo "üîç Verificando tipos com MyPy..."
	$(MYPY) $(SRC_DIR)
	@echo "‚úÖ Verifica√ß√£o de tipos conclu√≠da"

security-check:  ## Verifica seguran√ßa com Bandit
	@echo "üîí Verificando seguran√ßa com Bandit..."
	$(BANDIT) -r $(SRC_DIR) -f json -o bandit-report.json || true
	$(BANDIT) -r $(SRC_DIR)
	@echo "‚úÖ Verifica√ß√£o de seguran√ßa conclu√≠da"

quality-check: format-check lint type-check  ## Executa todos os checks de qualidade
	@echo "‚úÖ Todos os checks de qualidade passaram!"

# =============================================================================
# Banco de Dados - Alembic
# =============================================================================
migrate: migrate-up  ## Alias para migrate-up

migrate-up:  ## Aplica migra√ß√µes do Alembic (pr√≥xima)
	@echo "üìä Aplicando migra√ß√£o..."
	$(ALEMBIC) upgrade +1
	@echo "‚úÖ Migra√ß√£o aplicada"

migrate-down:  ## Reverte migra√ß√£o anterior
	@echo "üìä Revertendo migra√ß√£o..."
	$(ALEMBIC) downgrade -1
	@echo "‚úÖ Migra√ß√£o revertida"

migrate-head:  ## Aplica todas as migra√ß√µes pendentes
	@echo "üìä Aplicando todas as migra√ß√µes..."
	$(ALEMBIC) upgrade head
	@echo "‚úÖ Todas as migra√ß√µes aplicadas"

migrate-revision:  ## Cria nova migra√ß√£o (use: make migrate-revision MESSAGE="mensagem")
	@echo "üìä Criando nova migra√ß√£o..."
	@if [ -z "$(MESSAGE)" ]; then \
		$(ALEMBIC) revision --autogenerate; \
	else \
		$(ALEMBIC) revision --autogenerate -m "$(MESSAGE)"; \
	fi
	@echo "‚úÖ Migra√ß√£o criada"

migrate-history:  ## Mostra hist√≥rico de migra√ß√µes
	@echo "üìä Hist√≥rico de migra√ß√µes:"
	$(ALEMBIC) history

migrate-current:  ## Mostra migra√ß√£o atual
	@echo "üìä Migra√ß√£o atual:"
	$(ALEMBIC) current

# =============================================================================
# Execu√ß√£o
# =============================================================================
run:  ## Executa o bot
	@echo "üöÄ Executando bot..."
	python -m src.crypto_bot.cli.main

run-dry:  ## Executa o bot em modo dry-run
	@echo "üöÄ Executando bot em modo dry-run..."
	python -m src.crypto_bot.cli.main --dry-run

check-all: quality-check test-unit  ## Executa todos os checks e testes unit√°rios
	@echo "‚úÖ Todos os checks e testes passaram!"

# =============================================================================
# Limpeza
# =============================================================================
clean:  ## Remove arquivos tempor√°rios
	@echo "üßπ Limpando arquivos tempor√°rios..."
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete 2>/dev/null || true
	find . -type f -name "*.pyo" -delete 2>/dev/null || true
	find . -type f -name "*.pyd" -delete 2>/dev/null || true
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name ".mypy_cache" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name "htmlcov" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name ".coverage" -delete 2>/dev/null || true
	rm -f bandit-report.json 2>/dev/null || true
	@echo "‚úÖ Limpeza conclu√≠da"

clean-py: clean  ## Remove arquivos Python tempor√°rios (alias)

clean-docker:  ## Remove containers e volumes do Docker
	@echo "üßπ Removendo containers e volumes..."
	docker-compose down -v
	docker system prune -f
	@echo "‚úÖ Limpeza Docker conclu√≠da"

clean-data:  ## Remove dados persistentes (CUIDADO!)
	@echo "‚ö†Ô∏è  Removendo dados persistentes..."
	docker volume rm crypto-bot-postgres-data crypto-bot-redis-data 2>/dev/null || true
	@echo "‚úÖ Dados removidos"

clean-all: clean clean-docker  ## Limpa tudo (arquivos + Docker)
	@echo "üßπ Limpeza completa conclu√≠da"

# =============================================================================
# Setup Completo
# =============================================================================
setup: venv install dev-install up migrate-head  ## Setup completo do projeto
	@echo ""
	@echo "‚úÖ Setup completo!"
	@echo ""
	@echo "Pr√≥ximos passos:"
	@echo "1. Copie .env.example para .env"
	@echo "2. Configure suas credenciais no .env"
	@echo "3. Execute: make run"
	@echo ""
	@echo "Para ativar o ambiente virtual:"
	@echo "  source .venv/bin/activate"
	@echo ""

# =============================================================================
# Desenvolvimento
# =============================================================================
dev-setup: setup  ## Setup para desenvolvimento (alias)

dev-start: up  ## Inicia ambiente de desenvolvimento
	@echo "‚úÖ Ambiente de desenvolvimento pronto!"

watch:  ## Executa testes em modo watch
	make test-watch

# =============================================================================
# Relat√≥rios
# =============================================================================
report-cov: test-cov  ## Gera relat√≥rio de cobertura
	@echo "üìä Relat√≥rio de cobertura em: htmlcov/index.html"

report-lint: lint  ## Gera relat√≥rio de linting
	@echo "üìä Relat√≥rio de linting conclu√≠do"

# =============================================================================
# Comandos Especiais
# =============================================================================
fix: format lint-fix  ## Formata e corrige problemas autom√°ticos
	@echo "‚úÖ Corre√ß√µes aplicadas"

pre-commit: format lint type-check test  ## Executa checks pr√©-commit
	@echo "‚úÖ Checks pr√©-commit passaram!"

ci: clean quality-check test-unit  ## Executa pipeline CI local
	@echo "‚úÖ Pipeline CI local conclu√≠do!"

.DEFAULT_GOAL := help

