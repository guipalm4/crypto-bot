# =============================================================================
# CRYPTO TRADING BOT - Docker Compose Configuration
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # PostgreSQL Database
  # =============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: crypto-bot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: crypto_bot
      POSTGRES_USER: crypto_bot_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-crypto_bot_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - crypto-bot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crypto_bot_user -d crypto_bot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # Redis Cache
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: crypto-bot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crypto-bot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # Crypto Trading Bot Application
  # =============================================================================
  crypto-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-bot-app
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://crypto_bot_user:${POSTGRES_PASSWORD:-crypto_bot_password}@postgres:5432/crypto_bot
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crypto-bot-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Monitoring - Prometheus
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-bot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - crypto-bot-network

  # =============================================================================
  # Monitoring - Grafana
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: crypto-bot-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - crypto-bot-network

  # =============================================================================
  # Log Aggregation - Loki
  # =============================================================================
  loki:
    image: grafana/loki:latest
    container_name: crypto-bot-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - crypto-bot-network

  # =============================================================================
  # Log Collection - Promtail
  # =============================================================================
  promtail:
    image: grafana/promtail:latest
    container_name: crypto-bot-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/crypto-bot:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - crypto-bot-network

# =============================================================================
# Networks
# =============================================================================
networks:
  crypto-bot-network:
    driver: bridge
    name: crypto-bot-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    name: crypto-bot-postgres-data
  redis_data:
    name: crypto-bot-redis-data
  prometheus_data:
    name: crypto-bot-prometheus-data
  grafana_data:
    name: crypto-bot-grafana-data
  loki_data:
    name: crypto-bot-loki-data
