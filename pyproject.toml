[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "crypto-bot"
version = "0.1.0"
description = "Sistema automatizado de trading de criptomoedas com arquitetura modular baseada em plugins"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Guilherme Palma", email = "gomes.lmc@gmail.com"}
]
keywords = ["crypto", "trading", "bot", "automation", "trading-bot"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "pydantic>=2.0.0",
    "ccxt>=4.0.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "aiohttp>=3.8.0",
    "asyncpg>=0.29.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.13.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "faker>=20.0.0",
    "freezegun>=1.2.0",
]

[project.urls]
Homepage = "https://github.com/guipalm4/crypto-bot"
Repository = "https://github.com/guipalm4/crypto-bot"
Issues = "https://github.com/guipalm4/crypto-bot/issues"
Documentation = "https://github.com/guipalm4/crypto-bot#readme"

[project.scripts]
crypto-bot = "crypto_bot.cli.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ccxt.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

# Structlog configuration
[tool.structlog]
processors = [
    "structlog.stdlib.filter_by_level",
    "structlog.stdlib.add_logger_name",
    "structlog.stdlib.add_log_level",
    "structlog.stdlib.PositionalArgumentsFormatter",
    "structlog.processors.TimeStamper",
    "structlog.processors.StackInfoRenderer",
    "structlog.processors.format_exc_info",
    "structlog.processors.UnicodeDecoder",
    "structlog.processors.JSONRenderer"
]
context_class = "structlog.threadlocal.wrap_dict"
logger_factory = "structlog.stdlib.LoggerFactory"
cache_logger_on_first_use = true
