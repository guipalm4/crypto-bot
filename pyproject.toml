[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "crypto-bot"
version = "0.1.0"
description = "Sistema automatizado de trading de criptomoedas com arquitetura modular baseada em plugins"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Guilherme Palma", email = "gomes.lmc@gmail.com"}
]
keywords = ["crypto", "trading", "bot", "automation", "trading-bot"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "pydantic>=2.0.0",
    "ccxt>=4.0.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "aiohttp>=3.8.0",
    "asyncpg>=0.29.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.0.0",
    "pandas-ta>=0.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "ruff>=0.6.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "faker>=20.0.0",
    "freezegun>=1.2.0",
]

[project.urls]
Homepage = "https://github.com/guipalm4/crypto-bot"
Repository = "https://github.com/guipalm4/crypto-bot"
Issues = "https://github.com/guipalm4/crypto-bot/issues"
Documentation = "https://github.com/guipalm4/crypto-bot#readme"

[project.scripts]
crypto-bot = "crypto_bot.cli.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration (lint only; Black permanece como formatter)
[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
# Conjunto equilibrado: focar em problemas reais, evitar nitpicks e modernizações automáticas
select = ["F", "E", "W", "I", "B"]
# Ajustes pontuais
ignore = [
  "E402",  # module level import not at top of file (tests e migrações)
  "E501",  # line too long - controlado por Black e permitido até 88
  "W291", "W292", "W391", "W293",  # whitespace insignificante
  "E265",  # espaçamento em comentários
]

[tool.ruff.lint.isort]
known-first-party = ["crypto_bot"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["F401", "E402", "F841", "UP035"]
"test_*" = ["F401", "E402", "F841", "UP035"]
"src/crypto_bot/plugins/registry.py" = ["B024", "B027"]


# MyPy configuration
# Note: SQLAlchemy 2.0+ includes built-in type stubs, no additional stubs needed
# asyncpg and other PostgreSQL-specific libraries are handled via asyncpg's own types
[tool.mypy]
python_version = "3.12"
files = ["src"]
namespace_packages = true
explicit_package_bases = true
mypy_path = ["src"]
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false  # Click decorators are type-safe in Python 3.12+
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true  # Enabled after cleaning up obsolete ignores
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true  # Global ignore for missing stubs

[[tool.mypy.overrides]]
# Libraries without stubs - these are intentionally ignored
module = [
    "ccxt.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# PyYAML - has stubs available
module = ["yaml"]
# No ignore_missing_imports here - uses types-PyYAML from requirements-dev.txt

[[tool.mypy.overrides]]
# BaseRepository - Generic type T doesn't guarantee 'id' attribute at compile time
# Runtime validation ensures all entities have 'id' before access
module = ["crypto_bot.infrastructure.database.repositories.base_repository"]
disable_error_code = ["attr-defined"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601", "B104"]  # B104: bind all interfaces expected for API config

# Structlog configuration
[tool.structlog]
processors = [
    "structlog.stdlib.filter_by_level",
    "structlog.stdlib.add_logger_name",
    "structlog.stdlib.add_log_level",
    "structlog.stdlib.PositionalArgumentsFormatter",
    "structlog.processors.TimeStamper",
    "structlog.processors.StackInfoRenderer",
    "structlog.processors.format_exc_info",
    "structlog.processors.UnicodeDecoder",
    "structlog.processors.JSONRenderer"
]
context_class = "structlog.threadlocal.wrap_dict"
logger_factory = "structlog.stdlib.LoggerFactory"
cache_logger_on_first_use = true
