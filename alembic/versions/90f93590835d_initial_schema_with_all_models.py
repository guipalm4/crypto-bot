"""Initial schema with all models

Revision ID: 90f93590835d
Revises:
Create Date: 2025-10-19 11:15:37.775486

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "90f93590835d"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "asset",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "metadata_json", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_asset_symbol"), "asset", ["symbol"], unique=True)
    op.create_table(
        "exchange",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("api_key_encrypted", sa.Text(), nullable=True),
        sa.Column("api_secret_encrypted", sa.Text(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_testnet", sa.Boolean(), nullable=False),
        sa.Column(
            "config_json", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_exchange_name"), "exchange", ["name"], unique=True)
    op.create_table(
        "strategy",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("plugin_name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "parameters_json", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_strategy_name"), "strategy", ["name"], unique=True)
    op.create_table(
        "trading_pair",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("base_asset_id", sa.UUID(), nullable=False),
        sa.Column("quote_asset_id", sa.UUID(), nullable=False),
        sa.Column("exchange_id", sa.UUID(), nullable=False),
        sa.Column("symbol", sa.String(length=50), nullable=False),
        sa.Column("min_order_size", sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column("max_order_size", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("tick_size", sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["base_asset_id"], ["asset.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["exchange_id"], ["exchange.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["quote_asset_id"], ["asset.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_trading_pair_base_asset_id"),
        "trading_pair",
        ["base_asset_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_trading_pair_exchange_id"),
        "trading_pair",
        ["exchange_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_trading_pair_quote_asset_id"),
        "trading_pair",
        ["quote_asset_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_trading_pair_symbol"), "trading_pair", ["symbol"], unique=False
    )
    op.create_table(
        "order",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("trading_pair_id", sa.UUID(), nullable=False),
        sa.Column("exchange_id", sa.UUID(), nullable=False),
        sa.Column("strategy_id", sa.UUID(), nullable=True),
        sa.Column("exchange_order_id", sa.String(length=100), nullable=True),
        sa.Column(
            "type",
            sa.Enum(
                "MARKET",
                "LIMIT",
                "STOP_LOSS",
                "STOP_LOSS_LIMIT",
                "TAKE_PROFIT",
                "TAKE_PROFIT_LIMIT",
                name="ordertype",
                native_enum=False,
                length=50,
            ),
            nullable=False,
        ),
        sa.Column(
            "side",
            sa.Enum("BUY", "SELL", name="orderside", native_enum=False, length=20),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING",
                "OPEN",
                "PARTIALLY_FILLED",
                "FILLED",
                "CANCELLED",
                "EXPIRED",
                "REJECTED",
                "FAILED",
                name="orderstatus",
                native_enum=False,
                length=50,
            ),
            nullable=False,
        ),
        sa.Column("quantity", sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column("price", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("executed_price", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column(
            "executed_quantity", sa.Numeric(precision=20, scale=8), nullable=False
        ),
        sa.Column("fee", sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column("fee_currency", sa.String(length=20), nullable=True),
        sa.Column("reason", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("executed_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["exchange_id"], ["exchange.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["strategy_id"], ["strategy.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["trading_pair_id"], ["trading_pair.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_order_created_at"), "order", ["created_at"], unique=False)
    op.create_index(
        op.f("ix_order_exchange_id"), "order", ["exchange_id"], unique=False
    )
    op.create_index(
        op.f("ix_order_exchange_order_id"), "order", ["exchange_order_id"], unique=False
    )
    op.create_index(op.f("ix_order_status"), "order", ["status"], unique=False)
    op.create_index(
        op.f("ix_order_strategy_id"), "order", ["strategy_id"], unique=False
    )
    op.create_index(
        op.f("ix_order_trading_pair_id"), "order", ["trading_pair_id"], unique=False
    )
    op.create_table(
        "position",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("trading_pair_id", sa.UUID(), nullable=False),
        sa.Column("exchange_id", sa.UUID(), nullable=False),
        sa.Column("strategy_id", sa.UUID(), nullable=True),
        sa.Column("entry_order_id", sa.UUID(), nullable=True),
        sa.Column("exit_order_id", sa.UUID(), nullable=True),
        sa.Column(
            "side",
            sa.Enum("LONG", "SHORT", name="positionside", native_enum=False, length=20),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "OPEN",
                "CLOSED",
                "LIQUIDATED",
                name="positionstatus",
                native_enum=False,
                length=20,
            ),
            nullable=False,
        ),
        sa.Column("quantity", sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column("entry_price", sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column("exit_price", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("stop_loss", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("take_profit", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("pnl", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("pnl_percentage", sa.Numeric(precision=10, scale=4), nullable=True),
        sa.Column("opened_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("closed_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["entry_order_id"], ["order.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["exchange_id"], ["exchange.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["exit_order_id"], ["order.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["strategy_id"], ["strategy.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["trading_pair_id"], ["trading_pair.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_position_exchange_id"), "position", ["exchange_id"], unique=False
    )
    op.create_index(
        op.f("ix_position_opened_at"), "position", ["opened_at"], unique=False
    )
    op.create_index(op.f("ix_position_status"), "position", ["status"], unique=False)
    op.create_index(
        op.f("ix_position_strategy_id"), "position", ["strategy_id"], unique=False
    )
    op.create_index(
        op.f("ix_position_trading_pair_id"),
        "position",
        ["trading_pair_id"],
        unique=False,
    )
    op.create_table(
        "trade",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("order_id", sa.UUID(), nullable=False),
        sa.Column("exchange_trade_id", sa.String(length=100), nullable=True),
        sa.Column("price", sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column("quantity", sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column("fee", sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["order_id"], ["order.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_trade_exchange_trade_id"), "trade", ["exchange_trade_id"], unique=False
    )
    op.create_index(op.f("ix_trade_order_id"), "trade", ["order_id"], unique=False)
    op.create_index(op.f("ix_trade_timestamp"), "trade", ["timestamp"], unique=False)
    op.drop_index(op.f("idx_trading_pairs_base_currency"), table_name="trading_pairs")
    op.drop_index(op.f("idx_trading_pairs_quote_currency"), table_name="trading_pairs")
    op.drop_index(op.f("idx_trading_pairs_symbol"), table_name="trading_pairs")
    op.drop_table("trading_pairs")
    op.drop_index(op.f("idx_exchanges_name"), table_name="exchanges")
    op.drop_table("exchanges")
    op.drop_index(op.f("idx_users_email"), table_name="users")
    op.drop_index(op.f("idx_users_username"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "username", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column("email", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "password_hash", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "is_active",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("users_pkey")),
        sa.UniqueConstraint(
            "email",
            name=op.f("users_email_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        sa.UniqueConstraint(
            "username",
            name=op.f("users_username_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(op.f("idx_users_username"), "users", ["username"], unique=False)
    op.create_index(op.f("idx_users_email"), "users", ["email"], unique=False)
    op.create_table(
        "exchanges",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column(
            "display_name", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column(
            "is_active",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("exchanges_pkey")),
        sa.UniqueConstraint(
            "name",
            name=op.f("exchanges_name_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(op.f("idx_exchanges_name"), "exchanges", ["name"], unique=False)
    op.create_table(
        "trading_pairs",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("symbol", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column(
            "base_currency", sa.VARCHAR(length=10), autoincrement=False, nullable=False
        ),
        sa.Column(
            "quote_currency", sa.VARCHAR(length=10), autoincrement=False, nullable=False
        ),
        sa.Column(
            "is_active",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("trading_pairs_pkey")),
        sa.UniqueConstraint(
            "symbol",
            "base_currency",
            "quote_currency",
            name=op.f("trading_pairs_symbol_base_currency_quote_currency_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(
        op.f("idx_trading_pairs_symbol"), "trading_pairs", ["symbol"], unique=False
    )
    op.create_index(
        op.f("idx_trading_pairs_quote_currency"),
        "trading_pairs",
        ["quote_currency"],
        unique=False,
    )
    op.create_index(
        op.f("idx_trading_pairs_base_currency"),
        "trading_pairs",
        ["base_currency"],
        unique=False,
    )
    op.drop_index(op.f("ix_trade_timestamp"), table_name="trade")
    op.drop_index(op.f("ix_trade_order_id"), table_name="trade")
    op.drop_index(op.f("ix_trade_exchange_trade_id"), table_name="trade")
    op.drop_table("trade")
    op.drop_index(op.f("ix_position_trading_pair_id"), table_name="position")
    op.drop_index(op.f("ix_position_strategy_id"), table_name="position")
    op.drop_index(op.f("ix_position_status"), table_name="position")
    op.drop_index(op.f("ix_position_opened_at"), table_name="position")
    op.drop_index(op.f("ix_position_exchange_id"), table_name="position")
    op.drop_table("position")
    op.drop_index(op.f("ix_order_trading_pair_id"), table_name="order")
    op.drop_index(op.f("ix_order_strategy_id"), table_name="order")
    op.drop_index(op.f("ix_order_status"), table_name="order")
    op.drop_index(op.f("ix_order_exchange_order_id"), table_name="order")
    op.drop_index(op.f("ix_order_exchange_id"), table_name="order")
    op.drop_index(op.f("ix_order_created_at"), table_name="order")
    op.drop_table("order")
    op.drop_index(op.f("ix_trading_pair_symbol"), table_name="trading_pair")
    op.drop_index(op.f("ix_trading_pair_quote_asset_id"), table_name="trading_pair")
    op.drop_index(op.f("ix_trading_pair_exchange_id"), table_name="trading_pair")
    op.drop_index(op.f("ix_trading_pair_base_asset_id"), table_name="trading_pair")
    op.drop_table("trading_pair")
    op.drop_index(op.f("ix_strategy_name"), table_name="strategy")
    op.drop_table("strategy")
    op.drop_index(op.f("ix_exchange_name"), table_name="exchange")
    op.drop_table("exchange")
    op.drop_index(op.f("ix_asset_symbol"), table_name="asset")
    op.drop_table("asset")
    # ### end Alembic commands ###
